events {
  worker_connections 1024;
}

http {
  lua_shared_dict auto_ssl 1m;
  lua_shared_dict auto_ssl_settings 64k;
  server_tokens off;
  access_log /dev/null;		
  error_log /dev/null;

  more_clear_headers Server;
  more_clear_headers X-Page-Speed;

  keepalive_timeout 0s;

	resolver 1.1.1.1 1.0.0.1 8.8.8.8 8.8.4.4 208.67.222.222 208.67.220.220 valid=60s;
	resolver_timeout 2s;
  include mime.types;

  init_by_lua_block {
    auto_ssl = (require "resty.auto-ssl").new()

    auto_ssl:set("allow_domain", function(domain)
      return true
    end)
    auto_ssl:set("dir", "/tmp")

    auto_ssl:init()
  }

  init_worker_by_lua_block {
    auto_ssl:init_worker()
  }

  server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    ssl_ciphers "ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384";

    ssl_certificate_by_lua_block {
      auto_ssl:ssl_certificate()
    }

	  ssl_certificate      /etc/letsencrypt/live/wwwer.org/fullchain.pem;
    ssl_certificate_key  /etc/letsencrypt/live/wwwer.org/privkey.pem;
    
    location / {
      return 301 $scheme://www.$host$request_uri;
    }
  }

  server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name "~^www\.(.*)$" ;
    return 444;
  }

  server {
    listen 80;
    listen [::]:80;
    server_name "~^(?!www\.).*" ;
    
    location /.well-known/acme-challenge/ {
      content_by_lua_block {
        auto_ssl:challenge_server()
      }
    }

    location / {
      return 301 $scheme://www.$host$request_uri;
    }
  }

  server {
    listen 80 ;
    listen [::]:80;
    server_name "~^www\.(.*)$" ;
    return 444;
  }

  server {
    listen 127.0.0.1:8999;
    client_body_buffer_size 128k;
    client_max_body_size 128k;
    location / {
      content_by_lua_block {
        auto_ssl:hook_server()
      }
    }
  }
}
